%Zainab Zikar Gauss-Siedel Method
clear all; 
clc;

%% Defining Parameters

% Define the number of points on the interior (this does not include the
% exterior boundary points)
MI=input('Value of X Intenal Nodes=');
NI=input('Value of Y Internal Nodes=');

M=MI+2;
N=NI+2;

% this generates the x and y values that will be used to calculate 
xvalues = linspace(0,2*pi,MI+2);
yvalues = linspace(0,2*pi,MI+2);

F = Functionzz(xvalues,yvalues);

% Bounds for the Equation 
ax = 0;
ay = 0;
bx = 2*pi;
by = 2*pi;
Er=10^-10 ; %Value of error for system convergence
U=zeros(M,N); %Initial Zero Matrix
W=zeros(M,N); % Initial Matrix to compute error
%% Defining Boundary Conditions for "top" and "bottom"

% Bottom boundary condition

U(1,:) = ((xvalues - ax).^2 ) .* sin( pi *(xvalues - ax) / (2*(bx-ax)) ) ;
W(1,:)=U(1,:);

% Top boundary condition
U(N,:) = cos(pi*(xvalues-ax)).*cosh(bx-xvalues);
W(N,:)=U(N,:)
Error = zeros(N,M-2);

EI=10; %Initial guess for error

% place these known values in the solution grid

% Parameters that are used in the iterations.
L=2*pi;
DX = L/(MI+1);
DX = DX.^2;
DY = L/(NI+1);
DY = DY.^2;
DEN = -2*(DX+DY);
DXDY=DX*DY;


Iterations=0 %Initial value of iteration to start the counter 
%Performing Gauss Seidel Approximations 
while(EI>Er)%Using while loop to generate iterations
   tic;
  
% Left Nuemann boundary condition
for i = 2:M-1;
    W(i,1) = U(i,1);
    U(i,1) = ( DXDY* F(i,1) - (2*DX)*U(i,2) - DY*U(i-1,1) - DY*U(i+1,1) )/DEN;
    Error(i,1) = abs((U(i,1) - W(i,1)) / U(1,1));

    %Right Nuemann Boundary Condition
    W(i,N) = U(i,N);
    U(i,N) =(  DXDY*F(i,end) - (2*DX)*U(i,end-1) - DY*U(i-1,end) - DY*U(i+1,end))/DEN;
    Error(i,N) = abs((U(i,N) - W(i,N)) / U(i,N));
end
% Evaluating the vlues for internal nodes using Gauss Siedel Iterations
for j = 2:N-1;
    for i = 2:M-1;
        W(i,j) = U(i,j);
        U(i,j) =(  DXDY*F(i,j) - DX*U(i,j-1) - DX*U(i,j+1)- DY*U(i-1,j) - DY*U(i+1,j))/DEN;
        Error(i,j)= abs((U(i,j) - W(i,j)) / U(i,j));
    end
end
EI = max(max(Error));
Time=toc;
Iterations=Iterations+1;
end
%%
%Plotting the results for data visualizations

TotalIterations=Iterations
TotalTime=Time
figure
surf(U)
figure
contourf(U)

